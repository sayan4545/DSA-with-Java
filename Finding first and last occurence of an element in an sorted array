package com.sayan.BinarySearch;
import java.util.*;



public class FirstandLastPosition {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int[] arr = new int[6];

        for (int i=0;i<arr.length;i++){
            arr[i]=sc.nextInt();
        }
        int target =10;
        int ans[] ={-1,-1};
        ans[0]=firstOccurence1(arr,target);
        ans[1]=lastOccurrence(arr,target);
        System.out.println(Arrays.toString(ans));

    }
    static int firstOccurence1(int[] arr, int target){
        int start =0;
        int end = arr.length-1;
        int ans =-1;
        while(start<=end){
            int mid = start+(end-start)/2;
            if(arr[mid]==target){
                ans = mid;
                end = mid-1;
            }

            else if(arr[mid]>target){
                end = mid-1;
            }
            else{
                start = mid+1;
            }

        }
        return ans;
    }
    static int lastOccurrence(int[] arr, int target) {
        int start = 0;
        int end = arr.length - 1;
        int lastIndex = -1;

        while (start <= end) {
            int mid = start + (end - start) / 2;

            if (arr[mid] == target) {
                // Update firstIndex and continue searching in the left half
                lastIndex = mid;
                start = mid+1;
            } else if (arr[mid] > target) {
                // Target is in the left half
                end = mid - 1;
            } else {
                // Target is in the right half
                start = mid + 1;
            }
        }

        return lastIndex;
    }
}








